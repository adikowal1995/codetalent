name: CI/CD Pipeline with GitHub Pages Deployment

on:
  push:
    branches: [main, development, production]
  pull_request:
    branches: [main, development, production]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Quality Assurance Jobs
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Skip pre-commit hooks for CI
        run: |
          echo "Skipping pre-commit hooks in CI environment"
          git config --global core.hooksPath /dev/null

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Skip pre-commit hooks for CI
        run: |
          echo "Skipping pre-commit hooks in CI environment"
          git config --global core.hooksPath /dev/null

      - name: Run tests
        run: npm run test:run

      - name: Run test coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate || true
        # Note: Some moderate vulnerabilities in dev dependencies (esbuild/vite) are acceptable
        # as they don't affect production builds and are common in development environments

      - name: Run npm outdated check
        run: npm outdated || true

  # Build and Deploy Jobs
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test, security-audit]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Skip pre-commit hooks for CI
        run: |
          echo "Skipping pre-commit hooks in CI environment"
          git config --global core.hooksPath /dev/null

      - name: Build application
        run: npm run build
        env:
          CI: false
          NODE_ENV: production
          VITE_BASE_URL: '/codetalent/'

      - name: Copy 404.html
        run: cp public/404.html dist/

      - name: List build output
        run: ls -la dist/

      - name: Verify build
        run: |
          if [ ! -f "dist/index.html" ]; then
            echo "Build failed: index.html not found"
            exit 1
          fi
          echo "Build verification passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  # Deploy to GitHub Pages
  deploy-development:
    name: Deploy to GitHub Pages (Development)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/development'
    environment: development
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      - name: Output Website URL
        run: |
          echo "üåê Website deployed successfully!"
          echo "üì± Development URL: https://adikowal1995.github.io/codetalent/"
          echo "üîó GitHub Pages URL: https://${{ github.repository_owner }}.github.io/codetalent/"
          echo "üìä GitHub Pages Status: https://github.com/${{ github.repository }}/actions"

  deploy-production:
    name: Deploy to GitHub Pages (Production)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      - name: Output Website URL
        run: |
          echo "üåê Website deployed successfully!"
          echo "üì± Production URL: https://adikowal1995.github.io/codetalent/"
          echo "üîó GitHub Pages URL: https://${{ github.repository_owner }}.github.io/codetalent/"
          echo "üìä GitHub Pages Status: https://github.com/${{ github.repository }}/actions"

  # Performance and Quality Metrics
  performance-test-development:
    name: Performance Test (Development)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/development'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@v0.12.x

      - name: Run Lighthouse CI
        run: |
          if [ -n "${{ secrets.LHCI_GITHUB_APP_TOKEN }}" ]; then
            lhci autorun
          else
            echo "LHCI_GITHUB_APP_TOKEN not configured, using temporary storage"
            lhci autorun --upload.target=temporary-public-storage
          fi
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}

  performance-test:
    name: Performance Test (Production)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: dist/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          if [ -n "${{ secrets.LHCI_GITHUB_APP_TOKEN }}" ]; then
            lhci autorun
          else
            echo "LHCI_GITHUB_APP_TOKEN not configured, using temporary storage"
            lhci autorun --upload.target=temporary-public-storage
          fi
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}

  # Summary and Notifications
  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-production]
    if: always()
    steps:
      - name: Show Deployment URLs
        run: |
          echo "üéâ Deployment Summary"
          echo "=================="
          echo "üì± Website URL: https://adikowal1995.github.io/codetalent/"
          echo "üîó GitHub Pages: https://${{ github.repository_owner }}.github.io/codetalent/"
          echo "üìä Repository: https://github.com/${{ github.repository }}"
          echo "üöÄ Actions: https://github.com/${{ github.repository }}/actions"
          echo ""
          echo "If the website is not accessible, check:"
          echo "1. GitHub Pages settings (Settings > Pages)"
          echo "2. Repository visibility (public required for free GitHub Pages)"
          echo "3. Recent workflow runs for any errors"

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs:
      [lint, test, security-audit, build, deploy-development, deploy-production]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå One or more jobs failed in the CI/CD pipeline"
          echo "Please check the workflow logs for details"
          exit 1
